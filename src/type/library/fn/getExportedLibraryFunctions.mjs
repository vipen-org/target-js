import scandir from "@anio-node-foundation/fs-scandir"
import path from "node:path"

import relativePathToCanonicalPath from "./relativePathToCanonicalPath.mjs"
import canonicalPathToName from "./canonicalPathToName.mjs"

import {isRegularFile} from "@anio-node-foundation/fs-utils"

//
// returns an array of all defined library functions:
//
// {
//     canonical_path: "folder/functionName",
//     canonical_name: "folder$functionName",
//     autogenerate: null|"function"|"factory"
// }
//

export default async function(vipen_session) {
	const project_root = vipen_session.getProjectRoot()

	const entries = await scandir(
		path.join(project_root, "src", "export")
	)

	// use a map to ignore duplicate definitions
	let functions = new Map()

	for (const {type, relative_path, absolute_path} of entries) {
		// ignore everything that is not a file
		if (type !== "file") continue

		// ignore and emit warning for files that are not javascript
		// files
		if (!relative_path.endsWith(".mjs")) {
			vipen_session.addWarning("lib.unsupported_file", {relative_path})

			continue
		}

		let canonical_path = relativePathToCanonicalPath(relative_path)
		let canonical_name = canonicalPathToName(canonical_path)

		functions.set(canonical_path, {
			canonical_path,
			canonical_name
		})
	}

	// convert map into array so we can sort it
	let ret = [
		...functions
	].map(([key, value]) => value)

	//
	// sort result for consistent code that will be generated by vipen
	//
	ret.sort((a, b) => {
		return a.canonical_name.localeCompare(b.canonical_name, "en")
	})

	//
	// determine what vipen should autogenerate
	// if a function and a factory are defined, nothing
	// needs to be autogenerated
	//
	for (const entry of ret) {
		const function_file_path = path.join(project_root, "src", "export", entry.canonical_path + ".mjs")
		const factory_file_path = path.join(project_root, "src", "export", entry.canonical_path + "Factory.mjs")

		const function_exists = await isRegularFile(function_file_path)
		const factory_exists = await isRegularFile(factory_file_path)

		// both function and factory exist, do not autogenerate
		if (function_exists && factory_exists) {
			entry.autogenerate = null
		}
		// function exists, so autogenerate the factory for it
		else if (function_exists) {
			entry.autogenerate = "factory"
		}
		// factory exists, so autogenerate the function for it
		else {
			entry.autogenerate = "function"
		}
	}

	return ret
}
